const MAX_CONSECUTIVE_DAYS = 6;
const WEEKDAY_BOOTH = 17;
const WEEKEND_BOOTH = Math.round(WEEKDAY_BOOTH / 3.83);

const INSUFFICIENT_R = 0.90;

const WEEKDAY_TYPE_TEXT = "A";
const WEEKEND_TYPE_TEXT = "B";

const WORK_STATE = "出勤";
const OFFDAY_PAID = "有休";
const OFFDAY_REQ = "希望休";
const OFFDAY_HALF_MOON = "午前休";
const OFFDAY_HALF_AFTER = "午後休";

const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

const holidays = spreadsheet.getSheetByName("祝日").getDataRange().getValues().map(row => new Date(row[0]).getTime());

const isWeekend = (date) => {
  const day = date.getDay();
  return day === 0 || day === 6 || holidays.includes(date.getTime());
}

const getOffDay = (date, dayOff) => {

  const fixed = dayOff.fixed.includes(date.getDay());
  const day = dayOff.dates.find(d => d.dateTime == date.getTime());
  const isOffDay = day && (day.type != OFFDAY_HALF_AFTER && day.type != OFFDAY_HALF_MOON);
  const isHalfOff = day && (day.type == OFFDAY_HALF_AFTER || day.type == OFFDAY_HALF_MOON);

  return {
    fixed,
    day,
    isHalfOff,
    isOff: fixed || isOffDay,
  };
}

const formatDate = (date) => {
  return Utilities.formatDate(date, Session.getScriptTimeZone(), "yyyy/MM/dd");
}

const isInsufficient = (day) => {
  const boothCount = isWeekend(day.date) ? WEEKEND_BOOTH : WEEKDAY_BOOTH;
  const count = day.assigned.length;
  const minimumBooth = boothCount * INSUFFICIENT_R;
  return minimumBooth > count;
}

const getEmployeeList = () => {

  const sheet = spreadsheet.getSheetByName("マスタ");
  const offDaysSheet = spreadsheet.getSheetByName("休み");
  const offDaysTable = offDaysSheet.getDataRange().getValues();

  offDaysTable.shift(); //ヘッダーを削除

  const offDaysEmployeeDic = {};
  
  offDaysTable.forEach(([id, name, date, type]) => {
    if (!offDaysEmployeeDic[id]) offDaysEmployeeDic[id] = [];
    offDaysEmployeeDic[id].push( { dateTime: new Date(date).getTime(), type });
  });

  const data = sheet.getDataRange().getValues();
  data.shift(); // remove header

  const weekTexts = ["日", "月", "火", "水", "木", "金", "土"];
 
  return data.map(([id, name, role, shiftType, _fxh]) => ({
    id,
    name,
    role,
    shiftType,
    dayOff: {
      dates: offDaysEmployeeDic[id] ?? [],
      fixed: _fxh.length > 0 ? _fxh.split(",").map(day => weekTexts.indexOf(day.trim())) : [],
    },
    assignedDates: []
  }));
}

const createCalendar = (start, end) => {

  const dates = [];
  const date = new Date(start);

  while (date <= end) {

    dates.push({
      date: new Date(date),
      assigned: [],
      offStates: {},
    });

    date.setDate(date.getDate() + 1);
  }

  return dates;
}

const loadScheduledShifts = (calendar, employees) => {

  const data = spreadsheet.getSheetByName("確定済みシフト").getDataRange().getValues();
  data.shift();

  for (const row of data) {

    const [dateText, id, name, state] = row;
    const date = new Date(dateText);
    const e = employees.find(_e => _e.id == id && _e.name == name);
    const targetDate = calendar.find(_d => _d.date.getTime() == date.getTime());

    if (e && targetDate) {

      const dateStr = formatDate(date);

      if (state == WORK_STATE) {
        targetDate.assigned.push(e);
        e.assignedDates.push(dateStr);
      }
    }
  }

}

const canAssign = (employee, targetDate, calendar) => {

  const targetTime = targetDate.getTime();

  // 過去と未来の連続出勤日数をチェック
  let consecutive = 0;

  for (let offset = -MAX_CONSECUTIVE_DAYS + 1; offset < MAX_CONSECUTIVE_DAYS; offset++) {

    if (offset === 0) continue;
    
    const checkDate = new Date(targetDate);
    checkDate.setDate(checkDate.getDate() + offset);
    
    const checkStr = formatDate(checkDate);
    
    if (employee.assignedDates.includes(checkStr)) {
      consecutive++;
    } else {
      consecutive = 0;
    }

    if (consecutive >= MAX_CONSECUTIVE_DAYS - 1) return false;
  }

  return true;
}

const assignShifts = (calendar, employees) => {

  const offStates = {};

  const registOffState = (emp, day, offday, states) => {
    if (offday.day) {
      const time = day.date.getTime();
      if (!states[time]) states[time] = {};
      states[time][emp.id] = offday;
    }
  }

  for (const day of calendar) {

    if (day.assigned.length > 0) continue;

    const boothCount = isWeekend(day.date) ? WEEKEND_BOOTH : WEEKDAY_BOOTH;
    const dateStr = formatDate(day.date);

    // Aの人は平日にすべて出勤
    const aTypeEmployees = employees.filter(e => e.shiftType === WEEKDAY_TYPE_TEXT);

    if (!isWeekend(day.date)) {
      for (const emp of aTypeEmployees) {

        const offday = getOffDay(day.date, emp.dayOff);

        if (!offday.isOff) {
          day.assigned.push(emp);
          emp.assignedDates.push(dateStr);
        }

        registOffState(emp, day, offday, offStates);
      }
    }

    // Bの人だけを対象に空き枠を埋める
    const alreadyAssignedIds = new Set(day.assigned.map(e => e.id));
    const remainingSpots = boothCount - day.assigned.length;

    if (remainingSpots > 0) {

      const bTypeCandidates = employees.filter(e => {

        const isAvailable = e.shiftType === WEEKEND_TYPE_TEXT;
        const offday = getOffDay(day.date, e.dayOff);

        registOffState(e, day, offday, offStates);

        return isAvailable &&
               !offday.isOff &&
               !alreadyAssignedIds.has(e.id) &&
               canAssign(e, day.date, calendar);
      });

      bTypeCandidates.sort((a, b) => a.assignedDates.length - b.assignedDates.length);

      const selected = bTypeCandidates.slice(0, remainingSpots);
      for (const emp of selected) {
        day.assigned.push(emp);
        emp.assignedDates.push(dateStr);
      }
    }
  }

  for (const day of calendar) {

    const isInsff = isInsufficient(day);



  }
  
  //午前休・午後休・固定休・有休・希望休を書き出す
  for (const day of calendar) {

    for (const employee of employees) {
      
      const state = offStates[day.date.getTime()]?.[employee.id];

      if (state) {
        day.offStates[employee.id] = { employee, isHalf: state.isHalfOff, isFixed: state.fixed, text: state.fixed ? "固定休" : state.day.type };
      }
    }
  }
}


const outputShift = (calendar) => {

  const sheet = spreadsheet.getSheetByName("生成表");
  sheet.clear();

  const aaa = spreadsheet.getSheetByName("マスタ").getDataSourceTables();

  const output = [["日付", "社員番号", "名前", "ステータス"]];
  
  for (const day of calendar) {

    for (const emp of day.assigned) {

      const state = day.offStates[emp.id];

      if (!state?.isHalf) {
        output.push([formatDate(day.date), emp.id, emp.name, WORK_STATE]);
      }
      else {
        output.push([formatDate(day.date), emp.id, emp.name, state.text]);          
      }
    }

    for (const id of Object.keys(day.offStates)) {
      const state = day.offStates[id];
      output.push([formatDate(day.date), state.employee.id, state.employee.name, state.text ]);
    }

  }

  sheet.getRange(1, 1, output.length, 4).setValues(output);
}

const run = () => {

  const employees = getEmployeeList();
  const calendar = createCalendar(new Date("2025/03/30"), new Date("2025/05/03"));

  loadScheduledShifts(calendar, employees);


  assignShifts(calendar, employees);
  outputShift(calendar);
}
